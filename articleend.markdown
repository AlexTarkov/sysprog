КОРНИ ПРОБЛЕМЫ

Начнем с небольшого экскурса в прошлое. (отмотаем время на год назад..!!)

Реляционные базы данных существуют уже около 30 лет.

Типичное строение РБД
- Реляционная база данных представляет собой набор таблиц (сущностей). Таблицы состоят из колонок и строк (кортежей).
- Внутри таблиц могут быть определены ограничения, между таблицами существуют отношения.
- При помощи SQL можно выполнять запросы, которые возвращают наборы данных, получаемых из одной или нескольких таблиц.
- В рамках одного запроса данные получаются из нескольких таблиц путем их соединения (JOIN), чаще всего для соединения используются те же колонки, которые определяют отношения между таблицами.

Нормализация — это процесс структурирования модели данных, обеспечивающий связность и отсутствие избыточности в данных.

Почти все системы баз данных, которые мы используем, являются реляционными, такие как Oracle, SQL Server, MySQL.

Причины такого доминирования неочевидны.
На протяжении всего существования они предлагали наилучшую смесь
- простоты, устойчивости, гибкости, производительности, масштабируемости и совместимости в сфере управлении данными.

Однако чтобы обеспечить все эти особенности, реляционные хранилища невероятно сложны внутри.
Например, простой SELECT запрос может иметь сотни потенциальных путей выполнения, которые оптимизатор оценит непосредственно во время выполнения запроса.
Внутри РСУБД создает план выполнения, основывающийся на вещах вроде алгоритмов оценки стоимости и наилучшим образом отвечающий запросу.

Раньше всеобщее доминирование реляционных СУБД перевешивало какие-либо недочеты (не в смеси, но в качествах по отдельности).

Сегодня ситуация изменилась. Разнообразие приложений растет, и одна из необходимых особенностей баз данных начинает затмевать другие - МАСШТАБИРУЕМОСТЬ. (Больше приложений работают в условиях высокой нагрузки).

РБД хорошо масштабируются только на единственном сервере. Если увеличить количество серверов до сотни или тысячи, сложность (устройства РБД) возрастет на порядок, и характеристики, которые делают реляционные БД такими привлекательными, стремительно снижают к нулю шансы использовать их в качестве платформы для больших распределенных систем.

Нужно применять другие типы баз данных, которые обладают более высокой способностью к масштабированию, пусть и ценой других возможностей, доступных в реляционных БД.

------------------------- появление термина

Термин впервые он стал использоваться в конце 90-х, реальный смысл в том виде, как он используется сейчас, приобрел только в середине 2009.

Изначально так называлась опенсорсная база данных, созданная Карло Строззи, которая хранила все данные как ASCII файлы и использовала шелловские скрипты вместо SQL для доступа к данным. С “NoSQL” в его нынешнем виде она ничего общего не имела.

В июне 2009 в Сан-Франциско Йоханом Оскарссоном была организована встреча, на которой планировалось обсудить новые веяния на ИТ рынке хранения и обработки данных.Для яркой вывески для встречи требовалось найти емкий и лаконичный термин, который отлично укладывался бы в Твиттеровский хэштег. Один из таких терминов предложил Эрик Эванс из RackSpace — «NoSQL».

Термин “NoSQL” имеет абсолютно стихийное происхождение и не имеет общепризнанного определения или научного учреждения за спиной. Это название скорее характеризует вектор развития ИТ в сторону от реляционных баз данных. Расшифровывается как Not Only SQL, хотя есть сторонники и прямого определения No SQL.

------------------------Принципы строения НСКЛ хранилищ

Реляционные БД и хранилища типа ключ-значение отличаются коренным образом и предназначены для решения разных задач.

В отличие от реляционной модели, которая сохраняет логическую бизнес-сущность приложения в различные физические таблицы в целях нормализации, NoSQL хранилища оперируют с этими сущностями как с целостными объектами.

Такой тип баз данных принято называть хранилище типа ключ-значение (key-value store).

По аналогии с таблицами существуют домены. В отличие от таблиц для доменов не определяется структура данных. Домен – это такая коробка, в которую вы можете складывать все что угодно. Записи внутри одного домена могут иметь разную структуру.

Записи идентифицируются по ключу, при этом каждая запись имеет динамический набор атрибутов, связанных с ней.

----------------------Свойства, достоинства и недостатки

* Не используется SQL
Многие базы пытаются использовать языки запросов, похожие на общеизвестный любимый синтаксис, но полностью его реализовать не удалось никому и вряд ли удастся.

- SQL - удобный язык

* Неструктурированность
В NoSQL базах в отличие от реляционных структура данных не регламентирована (или слабо типизированна, если проводить аналогии с языками прогаммирования) — в отдельной строке или документе можно добавить произвольное поле без предварительного декларативного изменения структуры всей таблицы.
+ эффективность работы с разреженными (sparse) данными. Если в одном документе есть поле date_published, а во втором — нет, значит никакого пустого поля date_published для второго создано не будет;
+ если появляется необходимость поменять модель данных, то единственное достаточное действие — отразить изменение в коде приложения. не нужно менять таблицы и тд.;
- отсутствие всевозможных ограничений со стороны базы (not null, unique, check constraint и т.д.)
- сложности в понимании и контроле структуры данных при параллельной работе с базой разных проектов

* Слабые ACID свойства. (ACID - Атомарность Согласованность Изолированность Надежность)
Долгое время согласованность (consistency) данных была очень важна для архитекторов и разработчиков. Все реляционные базы обеспечивали тот или иной уровень изоляции — либо за счет блокировок при изменении и блокирующего чтения, либо за счет undo-логов. С приходом огромных массивов информации и распределенных систем стало ясно, что обеспечить для них транзакционность набора операций с одной стороны и получить высокую доступность и быстрое время отклика с другой — невозможно. (ТЕОРЕМА САР).

Более того, даже обновление одной записи не гарантирует, что любой другой пользователь моментально увидит изменения в системе, ведь изменение может произойти, например, в мастер-ноде, а реплика асинхронно скопируется на слейв-ноду, с которой и работает другой пользователь. В таком случае он увидит результат через какой-то промежуток времени. Это называется eventual consistency и это то, на что идут сейчас все крупнейшие интернет-компании мира.

На практике жертвуют согласованностью.

+/-.

----------------------Главные + и -
_+_  (или -, так он указан ниже)
Более естественная интеграция с кодом
    Данные могут более эффективно отображаться в структуры приложения, нужен только код для записи данных в объекты.

_-_ (или +, так он указан выше. + это простота. не нужно возиться с таблицами)
Кастомизированность под приложение
    Преимущество реляционных БД заключается в том, что они вынуждают вас пройти через процесс разработки модели данных. Если вы хорошо спроектировали модель, то база данных будет содержать логическую структуру, которая полностью отражает структуру хранимых данных, однако расходится со структурой приложения. Таким образом, данные становятся независимы от приложения. Это значит, что другое приложение сможет использовать те же самые данные и логика приложения может быть изменена без каких-либо изменений в модели базы.

_-_
Совместимость
    В отличие от реляционных БД, хранилища, ориентированные на использование в «облаке», имеют гораздо меньше общих стандартов. Хоть концептуально они и не отличаются, они все имеют разные API, интерфейсы запросов и свою специфику.

_+++_
Масштабируемость:
    Репликация — копирование данных на другие узлы при обновлении.
    Позволяет как добиться большей масштабируемости, так и повысить доступность и сохранность данных. Принято подразделять на два вида: master-slave и peer-to-peer.
    Первый тип предполагает хорошую масштабируемость на чтение (может происходить с любого узла), но немасштабируемую запись (только в мастер узел). Также есть тонкости с обеспечением постоянной доступности (в случае падения мастера либо вручную, либо автоматически на его место назначается один из оставшихся узлов). Для второго типа репликации предполагается, что все узлы равны и могут обслуживать как запросы на чтение, так и на запись.
    Шардинг — разделение данных по узлам.

    В NoSQL базах данных шардинг, как и репликация, производятся автоматически самой базой и пользовательское приложение обособленно от этих сложных механизмов.


_+++_
Скорость
    За счет простоты и отсутсвтия сложной структуры внутри скорость выборки и других операций превосходит РБД.


_---_
Целостность данных
    Ограничения в реляционных БД гарантируют целостность данных на самом низком уровне. Данные, которые не удовлетворяют ограничениям, физически не могут попасть в базу. В хранилищах типа ключ-значение таких ограничений нет, поэтому контроль целостности данных полностью лежит на приложениях.

_---_
Отсутствие возможности сложных запросов
    Хранилища типа ключ-значение ориентированы на работу с записями. Это значит, что вся информация, относящаяся к данной записи, хранится вместе с ней. Домен (о котором вы можете думать как о таблице) может содержать бессчетное количество различных записей. Например, домен может содержать информацию о клиентах и о заказах. Это означает, что данные, как правило, дублируются между разными доменами. Это приемлемый подход, поскольку дисковое пространство дешево. Главное, что он позволяет все связанные данные хранить в одном месте, что улучшает масштабируемость, поскольку исчезает необходимость соединять данные из различных таблиц. При использовании реляционной БД, потребовалось бы использовать соединения, чтобы сгруппировать в одном месте нужную информацию.

----------------------Когда нужно использовать NoSQL?

Когда нужны:
    Скорость
    Масштабируемость
    Объектная модель данных
Не важны
    Согласованность
    Выборка сложных запросов (лучше создать отдельную РБД)


----------------------Основные игроки на рынке

Hadoop
 — проект фонда Apache Software Foundation, свободно распространяемый набор утилит, библиотек и программный каркас для разработки и выполнения распределённых программ, работающих на кластерах из сотен и тысяч узлов. Используется для реализации поисковых и контекстных механизмов многих высоконагруженных веб-сайтов, в том числе, для Yahoo! и Facebook[1]. Разработан в рамках вычислительной парадигмы MapReduce, согласно которой приложение разделяется на большое количество одинаковых элементарных заданий, выполнимых на узлах кластера и естественным образом сводимых в конечный результат.

Apache Cassandra
— распределённая система управления базами данных, относящаяся к классу noSQL-систем и рассчитанная на создание высокомасштабируемых и надёжных хранилищ огромных массивов данных, представленных в виде хэша.

Изначально проект был разработан в недрах Facebook и в 2009 году передан под крыло фонда Apache Software Foundation, эта организация продолжает развитие проекта. Промышленные решения на базе Cassandra развёрнуты для обеспечения сервисов таких компаний, как Cisco, IBM, Cloudkick, Reddit, Digg, Rackspace и Twitter.

Amazon SimpleDB
— сервис, предоставляющий ядро функций базы данных, а именно индексирование данных и выполнение запросов. Данный сервис тесно взаимодействует с сервисами Amazon S3 и Amazon EC2, в совокупности они предоставляют возможности для хранения, обработки запросов и данных в облаке, в результате повышается производительность.

Apache CouchDB
 — документо-ориентированная система управления базами данных, не требующая описания схемы данных. Эта программа является свободной, открытой, и написана на языке Erlang.

 MongoDB
 — документо-ориентированная система управления базами данных (СУБД) с открытым исходным кодом, не требующая описания схемы таблиц. Написана на языке C++. Разработана MongoDB

 Redis
 — сетевое журналируемое хранилище данных типа «ключ-значение» с открытым исходным кодом.

----------------------Прогнозы аналитиков

НРБД заняли свою нишу. Они не заменят реляционные базы данных. Эти решения созданы для разных целей, и для разных задач нужно выбирать свой способ хранения.
В дальнейшем будут все больше использоваться совместные решения

#Корни проблемы


Начнем с небольшого экскурса в прошлое. (отмотаем время на год назад..!!)

Реляционные базы данных существуют уже около 30 лет.

Типичное строение РБД:

- Реляционная база данных представляет собой набор таблиц (сущностей). Таблицы состоят из колонок и строк (кортежей).
- Внутри таблиц могут быть определены ограничения, между таблицами существуют отношения.
- При помощи SQL можно выполнять запросы, которые возвращают наборы данных, получаемых из одной или нескольких таблиц.
- В рамках одного запроса данные получаются из нескольких таблиц путем их соединения (JOIN), чаще всего для соединения используются те же колонки, которые определяют отношения между таблицами.

Нормализация — это процесс структурирования модели данных, обеспечивающий связность и отсутствие избыточности в данных.

Почти все системы баз данных, которые мы используем, являются реляционными, такие как Oracle, SQL Server, MySQL.

Причины такого доминирования неочевидны.
На протяжении всего существования они предлагали наилучшую смесь
- простоты, устойчивости, гибкости, производительности, масштабируемости и совместимости в сфере управлении данными.

Однако чтобы обеспечить все эти особенности, реляционные хранилища невероятно сложны внутри.
Например, простой SELECT запрос может иметь сотни потенциальных путей выполнения, которые оптимизатор оценит непосредственно во время выполнения запроса.
Внутри РСУБД создает план выполнения, основывающийся на вещах вроде алгоритмов оценки стоимости и наилучшим образом отвечающий запросу.

Раньше всеобщее доминирование реляционных СУБД перевешивало какие-либо недочеты (не в смеси, но в качествах по отдельности).

Сегодня ситуация изменилась. Разнообразие приложений растет, и одна из необходимых особенностей баз данных начинает затмевать другие - **МАСШТАБИРУЕМОСТЬ**. (Больше приложений работают в условиях высокой нагрузки).

РБД хорошо масштабируются только на единственном сервере. Если увеличить количество серверов до сотни или тысячи, сложность (устройства РБД) возрастет на порядок, и характеристики, которые делают реляционные БД такими привлекательными, стремительно снижают к нулю шансы использовать их в качестве платформы для больших распределенных систем.

Нужно применять другие типы баз данных, которые обладают более высокой способностью к масштабированию, пусть и ценой других возможностей, доступных в реляционных БД.

#Появление термина

Термин впервые он стал использоваться в конце 90-х, реальный смысл в том виде, как он используется сейчас, приобрел только в середине 2009.

Изначально так называлась опенсорсная база данных, созданная Карло Строззи, которая хранила все данные как ASCII файлы и использовала шелловские скрипты вместо SQL для доступа к данным. С “NoSQL” в его нынешнем виде она ничего общего не имела.

В июне 2009 в Сан-Франциско Йоханом Оскарссоном была организована встреча, на которой планировалось обсудить новые веяния на ИТ рынке хранения и обработки данных.Для яркой вывески для встречи требовалось найти емкий и лаконичный термин, который отлично укладывался бы в Твиттеровский хэштег. Один из таких терминов предложил Эрик Эванс из RackSpace — «NoSQL».

Термин “NoSQL” имеет абсолютно стихийное происхождение и не имеет общепризнанного определения или научного учреждения за спиной. Это название скорее характеризует вектор развития ИТ в сторону от реляционных баз данных. Расшифровывается как Not Only SQL, хотя есть сторонники и прямого определения No SQL.

#Принципы строения НРБД

Реляционные БД и хранилища типа ключ-значение отличаются коренным образом и предназначены для решения разных задач.

В отличие от реляционной модели, которая сохраняет логическую бизнес-сущность приложения в различные физические таблицы в целях нормализации, NoSQL хранилища оперируют с этими сущностями как с целостными объектами.

Такой тип баз данных принято называть хранилище типа ключ-значение (key-value store).

По аналогии с таблицами существуют домены. В отличие от таблиц для доменов не определяется структура данных. Домен – это такая коробка, в которую вы можете складывать все что угодно. Записи внутри одного домена могут иметь разную структуру.

Записи идентифицируются по ключу, при этом каждая запись имеет динамический набор атрибутов, связанных с ней.

#Свойства, достоинства и недостатки

1. Не используется SQL
Многие базы пытаются использовать языки запросов, похожие на общеизвестный любимый синтаксис, но полностью его реализовать не удалось никому и вряд ли удастся.

    \- SQL - удобный язык

2. Неструктурированность
В NoSQL базах в отличие от реляционных структура данных не регламентирована (или слабо типизированна, если проводить аналогии с языками прогаммирования) — в отдельной строке или документе можно добавить произвольное поле без предварительного декларативного изменения структуры всей таблицы.

    \+ эффективность работы с разреженными (sparse) данными. Если в одном документе есть поле date_published, а во втором — нет, значит никакого пустого поля date_published для второго создано не будет;
    \+ если появляется необходимость поменять модель данных, то единственное достаточное действие — отразить изменение в коде приложения. не нужно менять таблицы и тд.;
    \- отсутствие всевозможных ограничений со стороны базы (not null, unique, check constraint и т.д.)
    \- сложности в понимании и контроле структуры данных при параллельной работе с базой разных проектов

3. Слабые ACID свойства. (ACID - Атомарность Согласованность Изолированность Надежность)
Долгое время согласованность (consistency) данных была очень важна для архитекторов и разработчиков. Все реляционные базы обеспечивали тот или иной уровень изоляции — либо за счет блокировок при изменении и блокирующего чтения, либо за счет undo-логов. С приходом огромных массивов информации и распределенных систем стало ясно, что обеспечить для них транзакционность набора операций с одной стороны и получить высокую доступность и быстрое время отклика с другой — невозможно. (ТЕОРЕМА САР).
Более того, даже обновление одной записи не гарантирует, что любой другой пользователь моментально увидит изменения в системе, ведь изменение может произойти, например, в мастер-ноде, а реплика асинхронно скопируется на слейв-ноду, с которой и работает другой пользователь. В таком случае он увидит результат через какой-то промежуток времени. Это называется eventual consistency и это то, на что идут сейчас все крупнейшие интернет-компании мира.
На практике жертвуют согласованностью.

    \+/- одновременно

#Главные + и -

###Более естественная интеграция с кодом(+/-)
Данные могут более эффективно отображаться в структуры приложения, нужен только код для записи данных в объекты.

###Кастомизированность под приложение(+/-, выше)
Преимущество реляционных БД заключается в том, что они вынуждают вас пройти через процесс разработки модели данных. Если вы хорошо спроектировали модель, то база данных будет содержать логическую структуру, которая полностью отражает структуру хранимых данных, однако расходится со структурой приложения. Таким образом, данные становятся независимы от приложения. Это значит, что другое приложение сможет использовать те же самые данные и логика приложения может быть изменена без каких-либо изменений в модели базы.

###Совместимость(-)
В отличие от реляционных БД, хранилища, ориентированные на использование в «облаке», имеют гораздо меньше общих стандартов. Хоть концептуально они и не отличаются, они все имеют разные API, интерфейсы запросов и свою специфику.

##Масштабируемость:
#### 1. Репликация - копирование данных на другие узлы при обновлении.

Позволяет как добиться большей масштабируемости, так и повысить доступность и сохранность данных. Принято подразделять на два вида: master-slave и peer-to-peer.

Первый тип предполагает хорошую масштабируемость на чтение (может происходить с любого узла), но немасштабируемую запись (только в мастер узел).

Также есть тонкости с обеспечением постоянной доступности (в случае падения мастера либо вручную, либо автоматически на его место назначается один из оставшихся узлов). Для второго типа репликации предполагается, что все узлы равны и могут обслуживать как запросы на чтение, так и на запись.

#### 2.Шардинг — разделение данных по узлам.

Все данные разбиваются начасти, и разные части содержатся на разных узлах.

В NoSQL базах данных шардинг, как и репликация, производятся автоматически самой базой и пользовательское приложение обособленно от этих сложных механизмов.

##Скорость
За счет простоты и отсутсвтия сложной структуры внутри скорость выборки и других операций превосходит РБД.

##Целостность данных(-)
Ограничения в реляционных БД гарантируют целостность данных на самом низком уровне. Данные, которые не удовлетворяют ограничениям, физически не могут попасть в базу. В хранилищах типа ключ-значение таких ограничений нет, поэтому контроль целостности данных полностью лежит на приложениях.

##Отсутствие возможности сложных запросов

Хранилища типа ключ-значение ориентированы на работу с записями. Это значит, что вся информация, относящаяся к данной записи, хранится вместе с ней. Домен (о котором вы можете думать как о таблице) может содержать бессчетное количество различных записей. Например, домен может содержать информацию о клиентах и о заказах. Это означает, что данные, как правило, дублируются между разными доменами. Это приемлемый подход, поскольку дисковое пространство дешево. Главное, что он позволяет все связанные данные хранить в одном месте, что улучшает масштабируемость, поскольку исчезает необходимость соединять данные из различных таблиц. При использовании реляционной БД, потребовалось бы использовать соединения, чтобы сгруппировать в одном месте нужную информацию.

#Когда нужно использовать NoSQL?

Когда нужны:

* Скорость
* Масштабируемость
* Объектная модель данных

Не важны

* Согласованность
* Выборка сложных запросов (лучше создать отдельную РБД)

#Основные игроки на рынке

##Hadoop

Проект фонда Apache Software Foundation, свободно распространяемый набор утилит, библиотек и программный каркас для разработки и выполнения распределённых программ, работающих на кластерах из сотен и тысяч узлов. Используется для реализации поисковых и контекстных механизмов многих высоконагруженных веб-сайтов, в том числе, для Yahoo! и Facebook.

Разработан в рамках вычислительной парадигмы MapReduce, согласно которой приложение разделяется на большое количество одинаковых элементарных заданий, выполнимых на узлах кластера и естественным образом сводимых в конечный результат.

##Apache Cassandra

Распределённая система управления базами данных, относящаяся к классу noSQL-систем и рассчитанная на создание высокомасштабируемых и надёжных хранилищ огромных массивов данных, представленных в виде хэша.

Изначально проект был разработан в недрах Facebook и в 2009 году передан под крыло фонда Apache Software Foundation, эта организация продолжает развитие проекта. Промышленные решения на базе Cassandra развёрнуты для обеспечения сервисов таких компаний, как Cisco, IBM, Cloudkick, Reddit, Digg, Rackspace и Twitter.

##Amazon SimpleDB
Cервис, предоставляющий ядро функций базы данных, а именно индексирование данных и выполнение запросов. Данный сервис тесно взаимодействует с сервисами Amazon S3 и Amazon EC2, в совокупности они предоставляют возможности для хранения, обработки запросов и данных в облаке, в результате повышается производительность.

Apache CouchDB
 — документо-ориентированная система управления базами данных, не требующая описания схемы данных. Эта программа является свободной, открытой, и написана на языке Erlang.

##MongoDB
Документо-ориентированная система управления базами данных (СУБД) с открытым исходным кодом, не требующая описания схемы таблиц. Написана на языке C++. Разработана MongoDB

##Redis
Cетевое журналируемое хранилище данных типа «ключ-значение» с открытым исходным кодом.

#Прогнозы аналитиков

НРБД заняли свою нишу. Они не заменят реляционные базы данных. Эти решения созданы для разных целей, и для разных задач нужно выбирать свой способ хранения.

В дальнейшем будут все больше использоваться совместные решения



